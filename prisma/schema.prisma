// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  name        String   @unique
  owner       User     @relation(fields: [userId], references: [id])
  deliveryFee Float?
  email       String?
  category    String?
  title       String?
  image       Image?   @relation(fields: [imageId], references: [id])
  about       String?
  location    String?
  socialLinks Json?

  userId   Int       @default(1)
  imageId  Int?
  products Product[]
  carts    Cart[]
  orders   Order[]
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  address String? @unique
  email   String? @unique

  publicKey String[]
  googleId  String?

  shippingDetails Json?

  carts  Cart[]
  stores Store[]
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String
  images        Image[]
  price         Float
  physical      Boolean
  description   String?
  discountPrice Float?
  totalStocks   Int?
  totalSold     Int      @default(0)
  variants      Json[]
  category      String?
  tags          String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deleted       Boolean  @default(false)

  Store   Store @relation(fields: [storeId], references: [id])
  storeId Int
}

model Cart {
  id    Int  @id @default(autoincrement())
  items Json

  owner        User   @relation(fields: [ownerAddress], references: [address])
  ownerAddress String

  store     Store  @relation(fields: [storeName], references: [name])
  storeName String

  @@unique([ownerAddress, storeName])
}

model Order {
  id   Int    @id @default(autoincrement())
  hash String @unique

  items            Json
  customerAddress  String
  customerDetails  Json
  subtotal         Float
  totalAmount      Float
  totalPaid        Float?
  pricingBreakdown Json
  paymentMethod    String
  paymentReference String?
  payoutHash       String?
  status           OrderStatus
  paymentStatus    OrderPaymentStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Store   Store @relation(fields: [storeId], references: [id])
  storeId Int
}

// enums
enum OrderStatus {
  FULFILLED
  UNFULFILLED
  CANCELLED
}

enum OrderPaymentStatus {
  PAID
  UNPAID
  CONTACT_SELLER
}

// metas
model Image {
  id   Int    @id @default(autoincrement())
  hash String @unique
  key  String
  url  String

  Product   Product? @relation(fields: [productId], references: [id])
  productId Int?

  Store Store[]
}
