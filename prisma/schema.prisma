generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Store {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  owner       User?   @relation(fields: [userId], references: [id])
  owner_old   String? // TODO after migration
  deliveryFee Float?
  email       String?
  category    String?
  title       String?
  about       String?
  location    String?
  socialLinks Json?
  bankDetails Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  image    Image?    @relation(fields: [imageId], references: [id])
  carts    Cart[]
  orders   Order[]
  products Product[]

  imageId Int?
  userId  Int?
}

model User {
  id Int @id @default(autoincrement())

  address String? @unique
  email   String? @unique

  googleId        String? @unique
  shippingDetails Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  carts  Cart[]
  stores Store[]
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String
  price         Float
  physical      Boolean
  description   String?
  discountPrice Float?
  totalStocks   Int?
  totalSold     Int      @default(0)
  variants      Json[]
  category      String?
  tags          String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deleted       Boolean  @default(false)
  storeId       Int
  Store         Store    @relation(fields: [storeId], references: [id])
  images        Image[]
}

model Cart {
  id           Int    @id @default(autoincrement())
  items        Json
  ownerAddress String
  storeName    String
  owner        User   @relation(fields: [ownerAddress], references: [address])
  store        Store  @relation(fields: [storeName], references: [name])

  @@unique([ownerAddress, storeName])
}

model Order {
  id               Int                @id @default(autoincrement())
  hash             String             @unique
  items            Json
  customerAddress  String
  customerDetails  Json
  subtotal         Float
  totalAmount      Float
  totalPaid        Float?
  pricingBreakdown Json
  paymentMethod    String
  paymentReference String?
  payoutHash       String?
  status           OrderStatus
  paymentStatus    OrderPaymentStatus
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  storeId          Int
  Store            Store              @relation(fields: [storeId], references: [id])
}

model Image {
  id        Int      @id @default(autoincrement())
  hash      String   @unique
  key       String
  url       String
  productId Int?
  Product   Product? @relation(fields: [productId], references: [id])
  Store     Store[]
}

enum OrderStatus {
  FULFILLED
  UNFULFILLED
  CANCELLED
}

enum OrderPaymentStatus {
  PAID
  UNPAID
  CONTACT_SELLER
}
